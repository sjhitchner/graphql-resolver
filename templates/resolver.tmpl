package resolver

{{/* template "imports" .Imports 

{{ define "ResolverMapping" }}
	{{ if .IsList }}
		resolvers := make([]*{{ .ResolverName }}, 0, len(obj)
		for _, o := range obj {
			resolvers = append(resolvers, &{{ .ResolverName }} {t.aggregator,  &o}
		}
		return resolvers
	{{ else }}
		return &{{ .ResolverName }}{t.aggregator,  obj}
	{{ end }}
{{ end }}

*/}}

// import aggregator
// import context
// import errors

{{ range $enum := .Enums }}
{{ comment $enum.Description }}
type {{ $enum.Name }} int

const (
{{ range $i, $v := $enum.Values -}}
	{{ comment $v.Description }}
	{{ $v.Name }} {{ if eq $i 0 }}{{ $enum.Name }} = iota{{ end }}
{{ end }})

{{ end }}

type Resolver struct {
	aggregator Aggregator
}

{{ define "MethodSignature" }}
{{ comment .Field.Description }}
func (t *{{ .Name }}Resolver) {{ .Field.Name | camel }}(ctx context.Context 
  {{- if .Field.Args -}}
    , args struct{
    {{ range $a := .Field.Args -}}
	  {{ $a.Name }} {{ $a.Type }} 
    {{- end }}
 }{{ end -}}
) ({{ .Field.Type.String }}, error)
{{- end -}}

{{ define "ResolverMethod" }}
{{ end }}

{{ define "ConnectionMethod" }}
{{ end }}

{{ define "EdgeMethod" }}
{{ end }}

{{- define "PageInfoMethod" -}}
	return t.{{ lcamel .Name }}
{{- end -}}

{{/*

{{ range $q := .Queries }}
func (t *Resolver) {{ $q.Name }}(ctx context.Context 
{{ if  $q.Args }}
args struct{
{{- range $a := $q.Args }}
$a.Name $a.Type
{{ end }}
}) ($q.Return, error) {
	{{ $q.Name }}, err := t.aggregator.{{ $q.Aggregator }}(ctx context.Context)
	if err != nil {
		return nil, err
	}

	{{ template "ResolverMapping" $q }}	
}
{{ end }}
{{ end }}
*/}}


{{ range $m := .Models }}
{{ comment $m.Description }}
type {{ $m.Name }}Resolver struct {
	{{- if isResolver $m.Type }}
	aggregator Aggregator
	obj *{{ $m.Name }}
	{{- else if isQuery $m.Type }}
	aggregator Aggregator
	{{- else }}
		{{ range $f := $m.Fields -}}
			{{ lcamel $f.Name }} {{ $f.Type.String }}
		{{ end }}
	{{- end }}
}

{{ range $f := $m.Fields -}}
	{{ template "MethodSignature" args "Name" $m.Name "Field" $f }} {
	{{- if isResolver $m.Type }}
		{{ template "ResolverMethod" $f }}
	{{- else if isQuery $m.Type }}
		{{ template "ResolverMethod" $f }}
	{{- else if isConnection $m.Type }}
		{{ template "ConnectionMethod" $f }}
	{{- else if isEdge $m.Type }}
		{{ template "EdgeMethod" $f }}
	{{- else if isPageInfo $m.Type }}
		{{ template "PageInfoMethod" $f }}
	{{- end }}
}
{{ end }}
{{ end }}


