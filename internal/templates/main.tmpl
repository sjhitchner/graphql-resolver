{{ template "Header" }}
package main

{{ template "Imports" unique .Imports "io/ioutil" "net/http" "context" "libdb:github.com/sjhitchner/toolbox/db" "graphql:github.com/sjhitchner/toolbox/http" "libsql:github.com/sjhitchner/toolbox/db/psql" "github.com/sjhitchner/toolbox/flag" "log:github.com/sirupsen/logrus"}}

var (
	sqlitePath string
	schemaPath string

	dbHost string
	dbUser string
	dbPassword string
	dbName string
	dbPort int
)

func init() {
	flag.StringVar(&sqlitePath, "sqlite", ":memory:", "Path to sqlite db")
	flag.StringVar(&schemaPath, "schema", "schema.gql", "Path to graphql schema")


	flag.StringVar(&dbHost, "database-host", "", "Database Host")
	flag.StringVar(&dbUser, "database-user", "", "Database User")
	flag.StringVar(&dbPassword, "database-password", "", "Database Password")
	flag.StringVar(&dbName, "database-name", "", "Database Name")
	flag.IntVar(&dbPort, "database-port", 5432, "Database Port")
}

// TODO: Sample Main
func main() {
	flag.Parse()

	log.SetLevel(log.TraceLevel)

	dbh, err := libsql.NewPSQLDBHandler( dbHost, dbName, dbUser, dbPassword, dbPort, libsql.SSLModeDisable)
	CheckError(err)

	schema, err := ioutil.ReadFile(schemaPath)
	CheckError(err)

	handler, err := SetupHandler(dbh, string(schema))
	CheckError(err)

	http.Handle("/graphql", handler)
	http.Handle("/", graphql.NewGraphiQLHandler(string(schema)))

	log.Fatal(http.ListenAndServe(":8080", nil))
}

func SetupHandler(dbh libdb.DBHandler, schema string) (http.Handler, error) {

	agg := aggregator.NewAggregator(
	{{- range $m := .Models }}
		db.New{{ camel $m.Name }}DB(dbh),
	{{- end }}
	)
	inter := interactor.NewInteractor(agg)

	handler := graphql.NewHandler(string(schema), &resolvers.Resolver{inter})

	ctx := context.Background()
	ctx = helpers.SetAggregator(ctx, agg)
	ctx = helpers.SetInteractor(ctx, inter)

	return graphql.WrapContext(
		ctx,
		graphql.WrapAuth(handler),
	), nil
}

func CheckError(err error) {
	if err != nil {
		panic(err)
	}
}
