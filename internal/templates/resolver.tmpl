{{ template "Header" }}
package resolvers

{{ template "Imports" unique .Imports "context" "github.com/graph-gophers/graphql-go" "github.com/pkg/errors" "log:github.com/sirupsen/logrus"}}


{{ define "MethodID" }}(ctx context.Context) graphql.ID {
	log.Tracef("{{ .Model.Name }}:{{ .Field.Name }} => %v", t.obj.{{ camel .Field.Name }}) 
	return ToID(t.obj.{{ camel .Field.Name }})
}
{{ end }}


{{ define "MethodTimestamp" }}(ctx context.Context) string {
	return t.obj.{{ camel .Field.Name }}.Format(time.RFC3339)
}
{{ end }}


{{ define "MethodPrimative" }}(ctx context.Context) {{ go2gql .Field }} {
	log.Tracef("{{ .Model.Name }}:{{ .Field.Name }} => %v", t.obj.{{ camel .Field.Name }}) 
	{{ if eq .Field.Type .Field.Primative -}}
	return t.obj.{{ camel .Field.Name }}
	{{- else -}}
	return {{ go2gql .Field }}(t.obj.{{ camel .Field.Name }})
	{{- end }}
}
{{ end }}


{{ define "MethodOne2One" -}} 
(ctx context.Context) (*{{ camel .Field.Relationship.To.Name }}Resolver, error) {
	obj, err := t.interactor.Get{{ camel .Field.Relationship.To.Name }}ById(ctx, t.obj.{{ camel .Field.Internal }})
	return &{{ camel .Field.Relationship.To.Name }}Resolver{t.interactor, obj}, errors.Wrapf(err, "Failed Getting {{ camel .Field.Name }} '%v'", t.obj.{{ camel .Field.Internal }})
}
{{ end }}


{{ define "MethodOne2Many" -}} 
(ctx context.Context, args struct{
	First int32 
	After graphql.ID
})	([]*{{ camel .Field.Relationship.To.Name }}Resolver, error) {
	after, err := FromID(args.After)
	if err != nil {
		return nil, errors.Wrapf(err, "Unable to decode After '%s'", args.After)
	}

	list, err := t.interactor.List{{ camel .Field.Relationship.To.Name }}sBy{{ camel .Field.Relationship.Field }}(ctx, t.obj.ID, args.First, after)
	resolvers := make([]*{{ camel .Field.Relationship.To.Name }}Resolver, len(list))
	for i := range resolvers {
		resolvers[i] = &{{ camel .Field.Relationship.To.Name }}Resolver{t.interactor, list[i]}
	}
	return resolvers, errors.Wrapf(err, "Failed Getting {{ camel .Field.Name }} By '%v'", t.obj.ID)
}
{{ end }}


{{ define "MethodMany2Many" -}}
(ctx context.Context, args struct {
	First int32 
	After graphql.ID
}) ([]*{{ camel .Field.Relationship.To.Name }}Resolver, error) {
	after, err := FromID(args.After)
	if err != nil {
		return nil, errors.Wrapf(err, "Unable to decode After '%s'", args.After)
	}

	list, err := t.interactor.List{{ camel .Field.Relationship.To.Name }}sBy{{ camel .Field.Relationship.Field }}(ctx, t.obj.ID, args.First, after)
	resolvers := make([]*{{ camel .Field.Relationship.To.Name }}Resolver, len(list))
	for i := range resolvers {
		resolvers[i] = &{{ camel .Field.Relationship.To.Name }}Resolver{t.interactor, list[i]}
	}
	return resolvers, errors.Wrapf(err, "Failed Getting {{ camel .Field.Name }} By '%v'", t.obj.ID)
}
{{ end }}



{{ with $m := .Model }}
{{ comment $m.Description }}
type {{ camel $m.Name }}Resolver struct {
	interactor domainx.Interactor
	obj *domainx.{{ camel $m.Name }}
}

func New{{ camel $m.Name }}Resolver(inter domainx.Interactor, obj *domainx.{{ camel $m.Name }}) *{{ camel $m.Name }}Resolver {
	if obj == nil {
		return nil
	}
	return &{{ camel $m.Name }}Resolver{inter, obj}
}

{{ range $f := $m.Fields }}
{{- if $f.ShouldExpose }}
func (t *{{ camel $m.Name }}Resolver) {{ camel $f.Name -}}
{{- if $f.Relationship -}}
	{{- if eq $f.Relationship.Type "many2many" -}}
		{{ template "MethodMany2Many" args "Model" $m "Field" $f }}
	{{- else if eq $f.Relationship.Type "one2many" -}}
		{{ template "MethodOne2Many" args "Model" $m "Field" $f }}
	{{- else -}}
		{{ template "MethodOne2One" args "Model" $m "Field" $f }}
	{{- end -}}
{{- else if eq $f.Type "id" -}}
	{{ template "MethodID" args "Model" $m "Field" $f }}
{{- else if eq $f.Type "timestamp" -}}
	{{ template "MethodTimestamp" args "Model" $m "Field" $f }}
{{- else -}}
	{{ template "MethodPrimative" args "Model" $m "Field" $f }}
{{- end -}}
{{- end }}
{{ end }}
{{ end }}


type {{ camel .Model.Name }}QueryResolver struct {
	interactor domainx.Interactor
}

func (t *{{ camel .Model.Name }}QueryResolver) {{ camel .Model.Name }}(ctx context.Context, args struct {
Id graphql.ID
}) (*{{ camel .Model.Name }}Resolver, error) {

	id, err := FromID(args.Id)
	if err != nil {
		return nil, errors.Wrapf(err, "invalid id")
	}

	obj, err := t.interactor.Get{{ camel .Model.Name }}ById(ctx, id)
	return &{{ camel .Model.Name }}Resolver{t.interactor, obj}, errors.Wrapf(err, "error getting {{ .Model.Name }} '%v'", args.Id)
}

func (t *{{ camel .Model.Name }}QueryResolver) {{ camel .Model.Name }}List(ctx context.Context, args struct {
First int32
After graphql.ID
}) ([]*{{ camel .Model.Name }}Resolver, error) {

	id, err := FromID(args.After)
	if err != nil {
		return nil, errors.Wrapf(err, "invalid id")
	}

	list, err := t.interactor.List{{ camel .Model.Plural }}(ctx, args.First, id)

	resolvers := make([]*{{ camel .Model.Name }}Resolver, len(list))
	for i:= range resolvers {
		resolvers[i] = &{{ camel .Model.Name }}Resolver{t.interactor, list[i]}
	}

	return resolvers, errors.Wrapf(err, "error getting {{ camel .Model.Plural }}")
}
