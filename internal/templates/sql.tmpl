package db

import (
	"context"
	"github.com/jmoiron/sqlx"
	"github.com/pkg/errors"
)

{{- define "SelectSingleFunction" -}} {
	return nil, errors.New("Not implemented")
}
{{ end }}

{{ define "SelectMultiFunction" }} {
	return nil, errors.New("Not implemented")
}
{{ end }}


{{ with $m := .Model }}
{{ with $name := printf "%s%s" $m.Name "DB" }} 
const {{ $m.Name}}Select = `
SELECT
{{- range $i, $f := $m.Fields -}}
	{{ if gt $i 0 }},{{ end }} {{ snake $f.Internal }}	
{{ end -}}
FROM {{ $m.SQL.Table }}
`

type {{ $name }} struct {
}

func New{{ $name }}() *{{ $name }} {
	return &{{ $name }}{}
}

{{- range $index := $m.Indexes }}
{{ with $queryName := printf "%s%s" $index.Name "Query" | camel }}
const {{ $queryName }} = {{ $m.Name }}Select + `
WHERE {{ range $i, $f := $index.Fields -}}
  {{- if gt $i 0 }} AND {{ end -}}
  {{ $f.Name }} = ${{ add $i 1 }}
{{- end }}
`
  {{ template "RepoSignature" args "Struct" $name "Model" $m.Name "Index" $index -}}
  {{- if eq $index.Name "primary" -}}
    {{ template "SelectSingleFunction" args "Struct" $name "Model" $m.Name "Index" $index}}
  {{- else -}}
    {{template "SelectMultiFunction" args "Struct" $name "Model" $m.Name "Index" $index}}
  {{ end }}
{{ end }}

{{ end }}{{ end }}{{ end }}
