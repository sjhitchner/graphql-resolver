{{ template "Header" }}
package resolvers

{{ template "Imports" unique .Imports "fmt" "strconv" "github.com/graph-gophers/graphql-go" "github.com/pkg/errors" }}


func ToID(id domainx.{{ camel .Id.Name }}) graphql.ID {
{{- if eq .Id.Type "string" }}
	return toStringID(id)
{{- else -}}
	return toIntegerID(id)
{{- end }}
}

func FromID(id graphql.ID) (domainx.{{ camel .Id.Name }}, error) {
{{- if eq .Id.Type "string" }}
	return fromStringID(id)
{{- else -}}
	return fromIntegerID(id)
{{- end }}
}

func toIntegerID(id domainx.{{ camel .Id.Name }}) graphql.ID {
	return graphql.ID(fmt.Sprintf("%d", id))
}

func toStringID(id domainx.{{ camel .Id.Name }}) graphql.ID {
	return graphql.ID(id)
}

func fromIntegerID(id graphql.ID) (domainx.{{ camel .Id.Name }}, error) {
	a, err := strconv.Atoi(string(id))
	if err != nil {
		return 0, errors.Wrapf(err, "Invalid Id '%v'", id)
	}
	return domainx.{{ camel .Id.Name }}(a), nil
}

func fromStringID(id graphql.ID) (domainx.{{ camel .Id.Name }}, error) {
{{- if eq .Id.Type "string" }}
	return domainx.{{ camel .Id.Name }}(id), nil
{{- else -}}
	return 0, nil
{{- end }}
}

type ErrorResolver struct {
	name    string
	field   string
	message string
}

func (t *ErrorResolver) Type() string {
	return t.name
}

func (t *ErrorResolver) Field() string {
	return t.field
}

func (t *ErrorResolver) Message() string {
	return t.message
}

func Errors(errs ...error) *[]*ErrorResolver {
	resolvers := make([]*ErrorResolver, 0, len(errs))
	for _, ierr := range errs {
		switch err := ierr.(type) {
		case *domainx.ValidationError:
			resolvers = append(resolvers, &ErrorResolver{
				name:    "validation",
				field:   err.Field,
				message: err.Message,
			})
		default:
		}
	}
	return &resolvers
}

