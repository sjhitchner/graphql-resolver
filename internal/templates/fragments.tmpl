{{ define "Imports" }}
import (
{{- range $import := . }}
	"{{ $import }}"
{{- end }}
){{ end }}


{{ define "Interface" }}
type {{ .Name }} interface {
{{- range $method := .Methods }}
	{{ $method.Name }}(ctx context.Context
{{- range $arg := $method.Args -}}
, {{ $arg.Name }} {{ $arg.Type }}
{{- end -}}
) ({{ $method.Return }}, error)
{{- end }}
}
{{ end }}


{{ define "Struct" }}
type {{ camel .Name }} struct {
{{- range $field := .Fields }}
	{{ camel $field.Name }} {{ $field.Type }} `db:"{{ $field.Internal }}" json:"{{ $field.Internal }}"`
{{- end }}
}

func (t *{{ .Name }}) String() string {
	b, err := json.MarshalIndent(t, "", "  ")
	if err != nil {
		return err.Error()
	}
	return string(b)
}
{{ end }}


{{ define "RepoSignature" }} 
func (t *{{ .Struct }}) Get{{ .Model }}By
{{- range $i, $f := .Index.Fields -}}
  {{- if gt $i 0 }}And{{ end -}}
  {{- camel $f.Name -}}
{{- end -}}(ctx context.Context
{{- range $f := .Index.Fields }}, {{ $f.Name }} {{ $f.Type }}{{ end }})(*{{ .Model }}, error)
{{- end }}

{{/*
{{ define "ModelSignature" }}
{{ comment .Field.Description }}
{{ if .Field.IsDeprecated }}{{ comment .Field.DeprecationReason }}{{ end }}
func (t *{{ .Name }}Resolver) {{ .Field.Name | camel }}(ctx context.Context 
  {{- if .Field.Args -}}
    , args struct{
    {{ range $a := .Field.Args -}}
	  {{ $a.Name }} {{ $a.Type }}
    {{ end -}}
 }{{ end -}}
) ({{ .Field.Type }}, error)
{{- end -}}


{{ define "ResolverMethod" }}
	return t.obj.{{ camel .Name }}
	
{{ end }}


{{ define "ResolverConnectionMethod" }}
	return &{{ camel .Name }}Resolver{
		t.aggregator,
		t.obj.{{ camel .Name }},
	}
{{ end }}


{{ define "ConnectionMethod" }}
	ConnectionMethod
{{ end }}


{{ define "EdgeMethod" }}
	EdgeMethod
{{ end }}


{{- define "PageInfoMethod" -}}
	return t.{{ lcamel .Name }}
{{- end -}}


{{ define "ModelFields" }}
{{ range $f := .Fields -}}
	{{ lcamel $f.Name }} {{ $f.Type }} `db:"{{ $f.Internal }}" json:"{{ $f.Internal }}"`
{{ end }}{{ end }}


{{/*
{{ define "ResolverMapping" }}
	{{ if .IsList }}
		resolvers := make([]*{{ .ResolverName }}, 0, len(obj)
		for _, o := range obj {
			resolvers = append(resolvers, &{{ .ResolverName }} {t.aggregator,  &o}
		}
		return resolvers
	{{ else }}
		return &{{ .ResolverName }}{t.aggregator,  obj}
	{{ end }}
{{ end }}


// import aggregator
// import context
// import errors


{{ range $q := .Queries }}
func (t *Resolver) {{ $q.Name }}(ctx context.Context 
{{ if  $q.Args }}
args struct{
{{- range $a := $q.Args }}
$a.Name $a.Type
{{ end }}
}) ($q.Return, error) {
	{{ $q.Name }}, err := t.aggregator.{{ $q.Aggregator }}(ctx context.Context)
	if err != nil {
		return nil, err
	}

	{{ template "ResolverMapping" $q }}	
}
{{ end }}
{{ end }}
*/}}


