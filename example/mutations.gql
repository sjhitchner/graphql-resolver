type Lipid {
	id: ID!
	name: String!
	description: String! 
	scientific_name: String! 
	naoh: Float!
	koh: Float!
	iodine: Int!
	ins: Int!
	lauric: Float!
	myristic: Float!
	palmitic: Float!
	stearic: Float!
	ricinoleic: Float!
	oleic: Float!
	linoleic: Float!
	linolenic: Float!
	hardness: Int!
	cleansing: Int!
	condition: Int!
	bubbly: Int!
	creamy: Int!
}

type Recipe {
	id: ID!
	name: String!
	units: String! 
	lye_type: String!
	lipid_weight: Float!
	water_lipid_ratio: Float!
	super_fat_percentage: Float!
	fragrance_ratio: Float!
	lipids: [RecipeLipid!]!
}

type RecipeLipid {
	id: ID!
	recipe: Recipe!
	lipid: Lipid!
	sap: Float!
	weight: Int!
	percentage: Float!
}

input CreateRecipeInput {
	name: String!
	units: String!
	lye_type: String!
	lipid_weight: Float!
	water_lipid_ratio: Float!
	super_fat_percentage: Float!
	fragrance_ratio: Float!
}

type CreateRecipePayload {
	recipe: Recipe!
}

input UpdateRecipeInput {
	id: ID!
	name: String!
	units: String!
	lye_type: String!
	lipid_weight: Float!
	water_lipid_ratio: Float!
	super_fat_percentage: Float!
	fragrance_ratio: Float!
}

type UpdateRecipePayload {
	recipe: Recipe!
}

input AddRecipeLipidInput {
	recipe_id: ID!
	lipid_id: ID!
	weight: Int!
	percentage: Int!	
}

type AddRecipeLipidPayload {
	recipe: Recipe!
}

input UpdateRecipeLipidInput {
	id: ID!
	weight: Int!
	percentage: Int!	
}

type UpdateRecipeLipidPayload {
	recipe: Recipe!
}

input DeleteRecipeLipidInput {
	id: ID!
}

type DeleteRecipeLipidPayload {
	recipe: Recipe!
}

type Mutation {
	createRecipe(input: CreateRecipeInput!): CreateRecipePayload
	updateReceipe(input: UpdateRecipeInput!): UpdateRecipePayload
	#addLipid(input: AddRecipeLipidInput!): AddRecipeLipidPayload
	#updateLipid(input: UpdateRecipeLipidInput!): UpdateRecipeLipidPayload
	#deleteLipid(input: DeleteRecipeLipidInput!): DeleteRecipeLipidPayload
}

type Query {
	lipids(prefix: String): [Lipid!]! 
	lipid(id: ID!): Lipid
	recipes: [Recipe!]!
	recipe(id: ID!): Recipe
}

schema {
	query: Query
	mutation: Mutation
}
