type User {
	id: ID!
	username: String!
	email: String!
	teamList(first: Int!, after: ID!): [Team!]!
}

type Team {
	id: ID!
	owner: User!
	name: String!
	memberList(first: Int!, after: ID!): [User!]!
	channelList(first: Int!, after: ID!): [Channel!]!
}


type Channel {
	id: ID!
	owner: User!
	team: Team!
	name: String!
	memberList(first: Int!, after: ID!): [User!]!
	messageList(first: Int!, after: ID!): [Message!]!
}


type Message {
	id: ID!
	text: String!
	timestamp: String!
}



type Query {
	ping: String!

	user(id: ID!): User!
	userList(first: Int!, after: ID!): [User!]!

	team(id: ID!): Team!
	teamList(first: Int!, after: ID!): [Team!]!

	channel(id: ID!): Channel!
	channelList(first: Int!, after: ID!): [Channel!]!

	message(id: ID!): Message!
	messageList(first: Int!, after: ID!): [Message!]!
} 

input CreateUserInput {
	username: String!
	email: String!
	password: String!
}

type CreateUserOutput {
	ok: Boolean!
	user: User!
	errors: [Error!]
}

input UpdateUserInput {
	id: ID!
	username: String!
	email: String!
	password: String!
}

type UpdateUserOutput {
	ok: Boolean!
	errors: [Error!]
} 

input DeleteUserInput {
	id: ID!
}

type DeleteUserOutput {
	ok: Boolean!
	errors: [Error!]
} 

input CreateTeamInput {
	name: String!
	ownerId: ID!
}

type CreateTeamOutput {
	ok: Boolean!
	team: Team!
	errors: [Error!]
}

input UpdateTeamInput {
	id: ID!
	name: String!
	ownerId: ID!
}

type UpdateTeamOutput {
	ok: Boolean!
	errors: [Error!]
} 

input DeleteTeamInput {
	id: ID!
}

type DeleteTeamOutput {
	ok: Boolean!
	errors: [Error!]
} 

input AddTeamMemberInput {
	teamId: ID!
	userId: ID!
}

type AddTeamMemberOutput {
	ok: Boolean!
	errors: [Error!]
} 

input RemoveTeamMemberInput {
	id: ID!
}

type RemoveTeamMemberOutput {
	ok: Boolean!
	errors: [Error!]
} 

input CreateChannelInput {
	name: String!
	isPublic: Boolean!
	ownerId: ID!
	teamId: ID!
}

type CreateChannelOutput {
	ok: Boolean!
	channel: Channel!
	errors: [Error!]
}

input UpdateChannelInput {
	id: ID!
	name: String!
	isPublic: Boolean!
	ownerId: ID!
	teamId: ID!
}

type UpdateChannelOutput {
	ok: Boolean!
	errors: [Error!]
} 

input DeleteChannelInput {
	id: ID!
}

type DeleteChannelOutput {
	ok: Boolean!
	errors: [Error!]
} 

input AddChannelMemberInput {
	channelId: ID!
	userId: ID!
}

type AddChannelMemberOutput {
	ok: Boolean!
	errors: [Error!]
} 

input RemoveChannelMemberInput {
	channelId: ID!
	userId: ID!
}

type RemoveChannelMemberOutput {
	ok: Boolean!
	errors: [Error!]
} 

input SendMessageInput {
	userId: ID!
	channelId: ID!
	text: String!
	timestamp: String!
}

type SendMessageOutput {
	ok: Boolean!
	message: Message!
	errors: [Error!]
}

type Error {
	type: String!
	field: String!
	message: String!
}

type Mutation {
	
	createUser(input: CreateUserInput!): CreateUserOutput!
	updateUser(input: UpdateUserInput!): UpdateUserOutput!
	deleteUser(input: DeleteUserInput!): DeleteUserOutput!
	
	createTeam(input: CreateTeamInput!): CreateTeamOutput!
	updateTeam(input: UpdateTeamInput!): UpdateTeamOutput!
	deleteTeam(input: DeleteTeamInput!): DeleteTeamOutput!
	
	addTeamMember(input: AddTeamMemberInput!): AddTeamMemberOutput!
	removeTeamMember(input: RemoveTeamMemberInput!): RemoveTeamMemberOutput!
	
	createChannel(input: CreateChannelInput!): CreateChannelOutput!
	updateChannel(input: UpdateChannelInput!): UpdateChannelOutput!
	deleteChannel(input: DeleteChannelInput!): DeleteChannelOutput!
	
	addChannelMember(input: AddChannelMemberInput!): AddChannelMemberOutput!
	removeChannelMember(input: RemoveChannelMemberInput!): RemoveChannelMemberOutput!
	
	sendMessage(input: SendMessageInput!): SendMessageOutput!
}

schema {
	query: Query
	mutation: Mutation
}
